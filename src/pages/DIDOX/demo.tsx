import {
  useCryptoCertificates,
  useCryptoMessage,
  useCryptoWebSocket,
} from "@shared/api";
import { useState } from "react";

export const CryptoWebSocketDemo: React.FC = () => {
  const crypto = useCryptoWebSocket();
  const cryptoMessage = useCryptoMessage();
  const cryptoCerts = useCryptoCertificates();

  const [selectedCert, setSelectedCert] = useState<any | null>(null);
  const [messagePlugin, setMessagePlugin] = useState("pfx");
  const [messageName, setMessageName] = useState("list_all_certificates");
  const [messageArgs, setMessageArgs] = useState("[]");
  const [customMessage, setCustomMessage] = useState(
    '{"plugin": "pfx", "name": "list_all_certificates"}',
  );
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (message: string) => {
    setLogs((prev) => [
      ...prev,
      `${new Date().toLocaleTimeString()}: ${message}`,
    ]);
  };

  const handleTestSignature = async () => {
    if (!selectedCert) {
      addLog("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç");
      return;
    }

    try {
      addLog("üîë –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞...");
      const keyId = await cryptoCerts.loadKey(selectedCert);
      addLog(`‚úÖ –ö–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: ${keyId}`);

      addLog("‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏...");
      const signature = await cryptoCerts.createSignature(keyId, "test data");
      addLog(`‚úÖ –ü–æ–¥–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: ${signature.pkcs7.substring(0, 50)}...`);
    } catch (error) {
      addLog(
        `‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
      );
    }
  };

  const handleSendStructuredMessage = async () => {
    if (!messagePlugin.trim() || !messageName.trim()) {
      addLog("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ plugin –∏ name");
      return;
    }

    try {
      const args = messageArgs.trim() ? JSON.parse(messageArgs) : [];
      addLog(
        `üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${messagePlugin}.${messageName}`,
      );
      const response = await cryptoMessage.sendWebSocketMessage(
        messagePlugin,
        messageName,
        args,
      );
      addLog(`üì• –û—Ç–≤–µ—Ç: ${JSON.stringify(response)}`);
    } catch (error) {
      addLog(
        `‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
      );
    }
  };

  const handleSendRawMessage = async () => {
    if (!customMessage.trim()) return;

    try {
      const message = JSON.parse(customMessage);
      addLog(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ raw —Å–æ–æ–±—â–µ–Ω–∏—è: ${customMessage}`);
      const response = await cryptoMessage.sendRawMessage(message);
      addLog(`üì• –û—Ç–≤–µ—Ç: ${JSON.stringify(response)}`);
    } catch (error) {
      addLog(
        `‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
      );
    }
  };

  return (
    <div className="min-h-screen p-8 bg-gray-100">
      <div className="max-w-6xl mx-auto space-y-6">
        <h1 className="text-4xl font-bold text-gray-900">
          üîê CryptoAPI WebSocket Provider Demo
        </h1>

        {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        <div className="p-6 bg-white rounded-lg shadow-lg">
          <h2 className="flex items-center mb-4 text-xl font-semibold">
            üîå –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          </h2>
          <div className="flex items-center mb-4 space-x-4">
            <div
              className={`w-4 h-4 rounded-full ${crypto.isConnected ? "bg-green-500 animate-pulse" : crypto.isConnecting ? "bg-yellow-500 animate-ping" : "bg-red-500"}`}
            />
            <span className="text-lg font-medium">
              {crypto.isConnected
                ? "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω"
                : crypto.isConnecting
                  ? "üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..."
                  : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"}
            </span>
            {crypto.error && (
              <span className="px-3 py-1 text-sm text-red-600 bg-red-100 rounded-full">
                ‚ö†Ô∏è {crypto.error}
              </span>
            )}
          </div>
          <div className="flex space-x-3">
            <button
              onClick={crypto.reconnect}
              disabled={crypto.isConnecting}
              className="px-4 py-2 text-white bg-blue-600 rounded hover:bg-blue-700 disabled:opacity-50"
            >
              üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            </button>
            <button
              onClick={crypto.clearError}
              disabled={!crypto.error}
              className="px-4 py-2 text-white bg-gray-600 rounded hover:bg-gray-700 disabled:opacity-50"
            >
              üßπ –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ */}
          <div className="p-6 bg-white rounded-lg shadow-lg">
            <h2 className="flex items-center mb-4 text-xl font-semibold">
              üìã –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã ({cryptoCerts.certificates.length})
            </h2>
            <div className="space-y-4">
              <button
                onClick={cryptoCerts.loadCertificates}
                disabled={
                  !crypto.isConnected || cryptoCerts.certificatesLoading
                }
                className="w-full px-4 py-2 text-white bg-blue-600 rounded hover:bg-blue-700 disabled:opacity-50"
              >
                {cryptoCerts.certificatesLoading
                  ? "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞..."
                  : "üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"}
              </button>

              {cryptoCerts.certificates.length > 0 && (
                <select
                  value={selectedCert?.name || ""}
                  onChange={(e) => {
                    const cert = cryptoCerts.certificates.find(
                      (c) => c.name === e.target.value,
                    );
                    setSelectedCert(cert || null);
                  }}
                  className="w-full p-3 border border-gray-300 rounded-lg"
                >
                  <option value="">üîë –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç</option>
                  {cryptoCerts.certificates.map((cert, index) => (
                    <option key={index} value={cert.name}>
                      {cert.name}
                    </option>
                  ))}
                </select>
              )}

              <button
                onClick={handleTestSignature}
                disabled={!crypto.isConnected || !selectedCert}
                className="w-full px-4 py-2 text-white bg-green-600 rounded hover:bg-green-700 disabled:opacity-50"
              >
                ‚úçÔ∏è –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∏
              </button>
            </div>
          </div>

          {/* –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π */}
          <div className="p-6 bg-white rounded-lg shadow-lg">
            <h2 className="flex items-center mb-4 text-xl font-semibold">
              üì° –û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
            </h2>
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <input
                  type="text"
                  value={messagePlugin}
                  onChange={(e) => setMessagePlugin(e.target.value)}
                  placeholder="üîå Plugin (–Ω–∞–ø—Ä–∏–º–µ—Ä: pfx)"
                  className="p-3 border border-gray-300 rounded-lg"
                />
                <input
                  type="text"
                  value={messageName}
                  onChange={(e) => setMessageName(e.target.value)}
                  placeholder="‚ö° Name (–Ω–∞–ø—Ä–∏–º–µ—Ä: list_all_certificates)"
                  className="p-3 border border-gray-300 rounded-lg"
                />
              </div>
              <textarea
                value={messageArgs}
                onChange={(e) => setMessageArgs(e.target.value)}
                placeholder='üìã Arguments JSON (–Ω–∞–ø—Ä–∏–º–µ—Ä: ["arg1", "arg2"] –∏–ª–∏ [] –¥–ª—è –ø—É—Å—Ç–æ–≥–æ)'
                className="w-full h-20 p-3 font-mono text-sm border border-gray-300 rounded-lg resize-none"
              />
              <button
                onClick={handleSendStructuredMessage}
                disabled={
                  !crypto.isConnected ||
                  !messagePlugin.trim() ||
                  !messageName.trim()
                }
                className="w-full px-4 py-2 text-white bg-blue-600 rounded hover:bg-blue-700 disabled:opacity-50"
              >
                üì° –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              </button>
            </div>
          </div>
        </div>

        {/* –û—Ç–ø—Ä–∞–≤–∫–∞ raw JSON —Å–æ–æ–±—â–µ–Ω–∏–π */}
        <div className="p-6 bg-white rounded-lg shadow-lg">
          <h2 className="flex items-center mb-4 text-xl font-semibold">
            üõ†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ Raw JSON —Å–æ–æ–±—â–µ–Ω–∏–π
          </h2>
          <div className="space-y-4">
            <textarea
              value={customMessage}
              onChange={(e) => setCustomMessage(e.target.value)}
              className="w-full h-32 p-3 font-mono text-sm border border-gray-300 rounded-lg"
            />
            <div className="flex space-x-2">
              <button
                onClick={handleSendRawMessage}
                disabled={!crypto.isConnected || !customMessage.trim()}
                className="px-6 py-2 text-white bg-indigo-600 rounded hover:bg-indigo-700 disabled:opacity-50"
              >
                üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å Raw JSON
              </button>
              <button
                onClick={() =>
                  setCustomMessage(
                    '{"plugin": "pfx", "name": "list_all_certificates"}',
                  )
                }
                className="px-4 py-2 text-white bg-gray-500 rounded hover:bg-gray-600"
              >
                üîÑ –°–±—Ä–æ—Å –∫ –ø—Ä–∏–º–µ—Ä—É
              </button>
            </div>
          </div>
        </div>

        {/* –õ–æ–≥–∏ */}
        <div className="p-6 bg-white rounded-lg shadow-lg">
          <h2 className="flex items-center mb-4 text-xl font-semibold">
            üìú –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          </h2>
          <div className="p-4 overflow-y-auto font-mono text-sm text-green-400 bg-gray-900 border rounded-lg h-80">
            {logs.length === 0 ? (
              <div className="italic text-gray-500">–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</div>
            ) : (
              logs.map((log, index) => (
                <div key={index} className="mb-1 leading-relaxed">
                  {log}
                </div>
              ))
            )}
          </div>
          <button
            onClick={() => setLogs([])}
            className="px-4 py-2 mt-3 text-sm text-white bg-gray-600 rounded hover:bg-gray-700"
          >
            üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
          </button>
        </div>
      </div>
    </div>
  );
};
